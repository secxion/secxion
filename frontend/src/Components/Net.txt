import React, { useEffect, useState } from 'react';
import './Net.css'; 
import SummaryApi from '../common';

const Net = () => {
  const [systemBlogs, setSystemBlogs] = useState([]);
  const [loading, setLoading] = useState(true); // Loading state

  useEffect(() => {
    const fetchBlogs = async () => {
      try {
        const response = await fetch(SummaryApi.getBlogs.url);
        const data = await response.json();
        setSystemBlogs(data);
      } catch (error) {
        console.error('Error fetching blogs:', error);
      } finally {
        setLoading(false); // Set loading to false after fetching
      }
    };

    fetchBlogs();
  }, []);

  return (
    <div className='net-container'>
      <div className='net-label'>
        <span className='label'>System Blog üì∞:</span>
      </div>
      <div className='blog-wrapper'>
        <div className='blog-content'>
          {loading ? (
            <span className='loading-text'>Loading... ‚è≥</span>
          ) : (
            systemBlogs.length > 0 ? (
              systemBlogs.map(blog => (
                <div key={blog.id} className='blog-item'>
                  <strong className='blog-title'>{blog.title} üöÄ</strong>: 
                  <span className='blog-text'>{blog.content}</span>
                </div>
              ))
            ) : (
              <span className='loading-text'>No blogs available. üòû</span>
            )
          )}
        </div>
      </div>
    </div>
  );
}

export default Net;
//









import React, { useEffect, useState } from 'react';
import './Net.css'; 
import SummaryApi from '../common';

const Net = () => {
  const [systemBlogs, setSystemBlogs] = useState([]);
  const [loading, setLoading] = useState(true); // Loading state

  useEffect(() => {
    const fetchBlogs = async () => {
      try {
        const response = await fetch(SummaryApi.getBlogs.url);
        const data = await response.json();
        setSystemBlogs(data);
      } catch (error) {
        console.error('Error fetching blogs:', error);
      } finally {
        setLoading(false); // Set loading to false after fetching
      }
    };

    fetchBlogs();
  }, []);

  return (
    <div className='net-container'>
      <div className='net-label'>
        <span className='label'>System Blog üì∞:</span>
      </div>
      <div className='blog-wrapper'>
        <div className='blog-content'>
          {loading ? (
            <span className='loading-text'>Loading... ‚è≥</span>
          ) : (
            systemBlogs.length > 0 ? (
              systemBlogs.map(blog => (
                <div key={blog.id} className='blog-item'>
                  <strong className='blog-title'>{blog.title} üöÄ</strong>: 
                  <span className='blog-text'>{blog.content}</span>
                </div>
              ))
            ) : (
              <span className='loading-text'>No blogs available. üòû</span>
            )
          )}
        </div>
      </div>
    </div>
  );
}

export default Net;

//

import React, { useEffect, useState } from 'react';
import './Net.css'; 
import SummaryApi from '../common';

const Net = () => {
  const [systemBlogs, setSystemBlogs] = useState([]);
  const [loading, setLoading] = useState(true); 

  useEffect(() => {
    const fetchBlogs = async () => {
      try {
        const response = await fetch(SummaryApi.getBlogs.url);
        const data = await response.json();
        setSystemBlogs(data);
      } catch (error) {
        console.error('Error fetching blogs:', error);
      } finally {
        setLoading(false); 
      }
    };

    fetchBlogs();
  }, []);

  return (
    <div className='net-container'>
      <div className='net-label'>
        <span className='label'>System Blog üì∞</span>
      </div>
      <div className='blog-wrapper'>
        <div className={`blog-content ${loading ? 'paused' : ''}`}>
          {loading ? (
            <span className='loading-text'>Loading... ‚è≥</span>
          ) : (
            systemBlogs.length > 0 ? (
              systemBlogs.map(blog => (
                <div key={blog.id} className='blog-item'>
                  <strong className='blog-title'>{blog.title} üöÄ</strong>: 
                  <span className='blog-text'>{blog.content}</span>
                </div>
              ))
            ) : (
              <span className='loading-text'>No blogs available. üòû</span>
            )
          )}
        </div>
      </div>
    </div>
  );
}

export default Net;


//


.net-container {
    height: 1.5rem;
    background: #0d0d26;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 50;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
    display: flex;
    align-items: center;
    padding: 0 20px;
    overflow: hidden;
    border-bottom: 1px solid rgba(255, 255, 255, 0.3);
}

.net-label {
    font-family: 'Poppins', sans-serif;
    font-size: 1rem;
    font-weight: 600;
    color: #00eaff;
    white-space: nowrap;
}

.blog-wrapper {
    flex-grow: 1;
    overflow: hidden;
    position: relative;
}

.blog-content {
    display: flex;
    align-items: center;
    animation: scroll 15s linear infinite;
    white-space: nowrap;
    padding-left: 20px;
    color: #ffffff;
}

.blog-content.paused {
    animation-play-state: paused;
}

.blog-item {
    margin-right: 40px;
    font-family: 'Poppins', sans-serif;
    font-size: 0.9rem;
    font-weight: 500;
    color: #00ff99;
}

.blog-title {
    font-weight: 700;
    color: #ff00ff;
}

.blog-text {
    font-weight: 400;
    color: #dfe6e9;
}

.loading-text {
    font-family: 'Poppins', sans-serif;
    font-size: 0.9rem;
    font-weight: 500;
    color: #ffffff;
}

@keyframes scroll {
    0% {
        transform: translateX(100%);
    }
    100% {
        transform: translateX(-100%);
    }
}
